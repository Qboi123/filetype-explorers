plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.10'
    id 'java'
}

group 'com.ultreon'
version '1.0.0'

repositories {
    mavenCentral()
    mavenCentral()
}
configurations.all {
    resolutionStrategy {
        dependencySubstitution {
            def os = System.getProperty("os.name").toLowerCase()
            if (os.contains("windows")) {
                substitute module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}') with module("org.eclipse.platform:org.eclipse.swt.win32.win32.x86_64:3.114.0")
            } else if (os.contains("linux")) {
                substitute module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}') with module("org.eclipse.platform:org.eclipse.swt.gtk.linux.x86_64:3.114.0")
            } else if (os.contains("mac")) {
                substitute module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}') with module("org.eclipse.platform:org.eclipse.swt.cocoa.macosx.x86_64:3.114.0")
            }
        }
    }
}

configurations {
    win32 {
        canBeResolved true
    }
    linux {
        canBeResolved true
    }
    macosx {
        canBeResolved true
    }
    common {
        canBeResolved true
    }
}

configurations {
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.6.10"
    common "org.jetbrains.kotlin:kotlin-stdlib:1.6.10"
    implementation project(":core")

    implementation 'org.eclipse.platform:org.eclipse.swt:3.118.0'
    implementation 'org.eclipse.platform:org.eclipse.jface:3.24.0'

    win32 'org.eclipse.swt:org.eclipse.swt.win32.win32.x86_64:4.3'
    win32 'org.eclipse.swt:org.eclipse.swt.win32.win32.x86:4.3'
    linux 'org.eclipse.swt:org.eclipse.swt.gtk.linux.x86_64:4.3'
    linux 'org.eclipse.swt:org.eclipse.swt.gtk.linux.x86:4.3'
    macosx 'org.eclipse.swt:org.eclipse.swt.cocoa.macosx:4.3'


    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

//task copyRunFiles(type: Copy) {
//    from fileTree("${project.projectDir}/../run")
//    into jar.outputs.files.singleFile.parentFile
//}

jar {
    from {
        (configurations.common).collect {
            it.getPath().startsWith(projectDir.getPath()) ? [] : it.isDirectory() ? it : zipTree(it)
        }
    }
    exclude("META-INF/*.RSA", "META-INF/*.DSA", "META-INF/*.SF")

    //noinspection GroovyAssignabilityCheck
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes 'Implementation-Title': 'QBubbles',
                'Implementation-Vendor': 'QTech Community',
                'Implementation-Version': "1.0-indev1",
                'Main-Class': 'com.ultreon.explorers.nbt.NbtExplorer',
                'Multi-Release': 'true'
    }
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
//    dependsOn(copyRunFiles)
}

task win32Jar(type: Jar) {
    from {
        (configurations.common + configurations.win32).collect {
            it.getPath().startsWith(projectDir.getPath()) ? [] : it.isDirectory() ? it : zipTree(it)
        }
    }

    from {
        (project(":core").tasks.getByName("jar").outputs.files).collect {
            it.getPath().startsWith(projectDir.getPath()) ? [] : it.isDirectory() ? it : zipTree(it)
        }
    }

    for (task in tasks.withType(AbstractCompile)) {
        for (file in ((AbstractCompile) task).outputs) {
            from file
        }
    }
    for (file in processResources.outputs) {
        from file
    }
    exclude("META-INF/*.RSA", "META-INF/*.DSA", "META-INF/*.SF")

    //noinspection GroovyAssignabilityCheck
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes 'Implementation-Title': 'QBubbles',
                'Implementation-Vendor': 'QTech Community',
                'Implementation-Version': "1.0-indev1",
                'Main-Class': 'com.ultreon.explorers.nbt.NbtExplorer',
                'Multi-Release': 'true'
    }
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
//    dependsOn(copyRunFiles)
    classifier "win32"
}

task linuxJar(type: Jar) {
    dependsOn(":core:jar")

    from {
        (configurations.common + configurations.linux).collect {
            it.getPath().startsWith(projectDir.getPath()) ? [] : it.isDirectory() ? it : zipTree(it)
        }
    }

    from {
        (project(":core").tasks.getByName("jar").outputs.files).collect {
            it.getPath().startsWith(projectDir.getPath()) ? [] : it.isDirectory() ? it : zipTree(it)
        }
    }

    for (task in tasks.withType(AbstractCompile)) {
        for (file in ((AbstractCompile) task).outputs) {
            from file
        }
    }
    for (file in processResources.outputs) {
        from file
    }
    exclude("META-INF/*.RSA", "META-INF/*.DSA", "META-INF/*.SF")

    //noinspection GroovyAssignabilityCheck
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes 'Implementation-Title': 'QBubbles',
                'Implementation-Vendor': 'QTech Community',
                'Implementation-Version': "1.0-indev1",
                'Main-Class': 'com.ultreon.explorers.nbt.NbtExplorer',
                'Multi-Release': 'true'
    }
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
//    dependsOn(copyRunFiles)
    classifier "linux"
}

task macosxJar(type: Jar) {
    from {
        (configurations.common + configurations.macosx).collect {
            it.getPath().startsWith(projectDir.getPath()) ? [] : it.isDirectory() ? it : zipTree(it)
        }
    }
    from {
        (project(":core").tasks.getByName("jar").outputs.files).collect {
            it.getPath().startsWith(projectDir.getPath()) ? [] : it.isDirectory() ? it : zipTree(it)
        }
    }
    for (task in tasks.withType(AbstractCompile)) {
        for (file in ((AbstractCompile) task).outputs) {
            from file
        }
    }
    for (file in processResources.outputs) {
        from file
    }
    exclude("META-INF/*.RSA", "META-INF/*.DSA", "META-INF/*.SF")

    //noinspection GroovyAssignabilityCheck
    manifest {
        //noinspection GroovyAssignabilityCheck
        attributes 'Implementation-Title': 'QBubbles',
                'Implementation-Vendor': 'QTech Community',
                'Implementation-Version': "1.0-indev1",
                'Main-Class': 'com.ultreon.explorers.nbt.NbtExplorer',
                'Multi-Release': 'true'
    }
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
//    dependsOn(copyRunFiles)
    classifier "macosx"
}

task allJar {
    dependsOn win32Jar
    dependsOn linuxJar
    dependsOn macosxJar
}

test {
    useJUnitPlatform()
}